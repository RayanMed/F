[{"/Users/BrahamMediouni/Desktop/ProjetJS/client/src/index.js":"1","/Users/BrahamMediouni/Desktop/ProjetJS/client/src/App.js":"2","/Users/BrahamMediouni/Desktop/ProjetJS/client/src/Chat.js":"3","/Users/BrahamMediouni/Desktop/ProjetJS/client/src/Home.js":"4"},{"size":199,"mtime":1611996745725,"results":"5","hashOfConfig":"6"},{"size":364,"mtime":1612035502145,"results":"7","hashOfConfig":"6"},{"size":2630,"mtime":1612042095225,"results":"8","hashOfConfig":"6"},{"size":1106,"mtime":1612035721257,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1p7wa77",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/BrahamMediouni/Desktop/ProjetJS/client/src/index.js",[],["19","20"],"/Users/BrahamMediouni/Desktop/ProjetJS/client/src/App.js",[],"/Users/BrahamMediouni/Desktop/ProjetJS/client/src/Chat.js",["21"],"/Users/BrahamMediouni/Desktop/ProjetJS/client/src/Home.js",[],{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":20,"column":14,"nodeType":"28","endLine":20,"endColumn":41},"no-native-reassign",["29"],"no-negated-in-lhs",["30"],"react-hooks/exhaustive-deps","Assignments to the 'socket' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-global-assign","no-unsafe-negation"]